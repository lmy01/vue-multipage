{"remainingRequest":"/Users/lmy/Desktop/lmy-学习记录/vue-multipage/node_modules/thread-loader/dist/cjs.js!/Users/lmy/Desktop/lmy-学习记录/vue-multipage/node_modules/babel-loader/lib/index.js!/Users/lmy/Desktop/lmy-学习记录/vue-multipage/src/lang/index.js","dependencies":[{"path":"/Users/lmy/Desktop/lmy-学习记录/vue-multipage/src/lang/index.js","mtime":1557246384000},{"path":"/Users/lmy/Desktop/lmy-学习记录/vue-multipage/node_modules/cache-loader/dist/cjs.js","mtime":1559007304000},{"path":"/Users/lmy/Desktop/lmy-学习记录/vue-multipage/node_modules/thread-loader/dist/cjs.js","mtime":1559007306000},{"path":"/Users/lmy/Desktop/lmy-学习记录/vue-multipage/node_modules/babel-loader/lib/index.js","mtime":1559007266000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\n\n// http://kazupon.github.io/vue-i18n/en/messages.html\nvar requireLang = require.context('@/lang', true, /\\.json$/);\n\nvar messages = {};\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  var _loop = function _loop() {\n    var file = _step.value;\n    if (file === './index.js') return \"continue\";\n    var path = file.replace(/(\\.\\/|\\.json$)/g, '').split('/');\n    path.reduce(function (o, s, i) {\n      if (o[s]) return o[s];\n      o[s] = i + 1 === path.length ? requireLang(file) : {};\n      return o[s];\n    }, messages);\n  };\n\n  for (var _iterator = requireLang.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var _ret = _loop();\n\n    if (_ret === \"continue\") continue;\n  }\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return != null) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n\nexport default messages;",null]}